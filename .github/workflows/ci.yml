name: Build and deploy
on: [push]

env:
  PROJECT_NAME: "random-post"
  AWS_DEFAULT_REGION: "eu-central-1"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DOCKER_REPO: ${{ secrets.AWS_REPO }}
  DOCKER_REPO_HOST: ${{ secrets.AWS_REPO_HOST }}

jobs:
  checks_build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install global npm modules
        run: npm i -g eslint audit-ci typescript
      - name: Install project dependencies
        run: npm i
      # - name: Run linter
      #   run: npm run tslint
      #       - name: Deps security check
      #         run: audit-ci --moderate
      # - name: Generate prisma client
      #   run: npm run prisma:generate
      - name: Build project
        run: npm run build
      - name: Archive dist
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist

  build_docker:
    runs-on: ubuntu-latest
    needs: checks_build_test
    if:
      contains('
      refs/heads/master
      ', github.ref)
    steps:
      - uses: actions/checkout@v2
      - name: Download dist back
        uses: actions/download-artifact@v1
        with:
          name: dist
      - name: Install aws
        run: pip install --user awscli
      - name: Set BRANCH_NAME
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Set ENV
        run: echo "ENV=$($(pwd)/deploy/branch_name_to_env.sh)" >> $GITHUB_ENV
      - name: Set DOCKER_REPO_URL
        run: echo "DOCKER_REPO_URL=${DOCKER_REPO_HOST}" >> $GITHUB_ENV
      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=${DOCKER_REPO_URL}:latest" >> $GITHUB_ENV
      - name: Login ECR
        run: aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REPO
      - name: Build docker
        run: docker build -t ${IMAGE_TAG} --build-arg NODE_ENV=${ENV} --build-arg SENTRY_RELEASE=${SENTRY_RELEASE} --build-arg REGISTRY_VALIDATION_DISABLED=true .
      - name: Docker push
        run: docker push ${IMAGE_TAG}

  pull_and_run_image:
    runs-on: ubuntu-latest
    needs: build_docker
    steps:
      - name: pull and run image
        uses: fifsky/ssh-action@master
        with:
          command: |
            aws ecr get-login-password --region ${{env.AWS_DEFAULT_REGION}} | sudo docker login --username AWS --password-stdin ${{env.DOCKER_REPO_HOST}}
            sudo docker pull ${{env.DOCKER_REPO_HOST}}:latest
            sudo docker rmi -f $(sudo docker images ${{env.DOCKER_REPO_HOST}}:latest -a -q)
            sudo docker rm -f $(sudo docker ps -a -q --filter ancestor=${{env.DOCKER_REPO_HOST}}:latest --format="{{.ID}}")
            cd env
            sudo docker run --env-file 1.env -p 80:8080 ${{env.DOCKER_REPO_HOST}}:latest | exit
          host: ${{ secrets.EC2_HOST }}
          user: ${{ secrets.EC2_USER }}
          key: ${{ secrets.PEM }}
